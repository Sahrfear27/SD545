{"ast":null,"code":"import axios from \"axios\";\n// Connect API to Server\nexport default axios.create({\n  baseURL: 'http://localhost:9000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const checkRequest = async (method, url, data) => {\n  const token = sessionStorage.getItem('token');\n  if (!token) {\n    throw new Error(\"Token do not exist in session storage\");\n  } else {\n    axios.request({\n      method,\n      url,\n      data,\n      headers: {\n        Authorization: `Baerer ${token}`\n      }\n    });\n  }\n};","map":{"version":3,"names":["axios","create","baseURL","headers","checkRequest","method","url","data","token","sessionStorage","getItem","Error","request","Authorization"],"sources":["/Users/sahrfearmacarthy/Maharishi University./myRepositories/SD545-WebApplication1/FinalProject/Music/client/src/Api/axios.ts"],"sourcesContent":["import axios from \"axios\"\nimport User from \"../Types/types\"\n// Connect API to Server\nexport default axios.create({\n    baseURL:'http://localhost:9000',\n    headers:{\n        'Content-Type': 'application/json'\n    }\n})\n\nexport const checkRequest = async (method:string, url:string, data:User)=>{\n    const token = sessionStorage.getItem('token')\n    if(!token){\n        throw new Error(\"Token do not exist in session storage\")\n    }\n    else{\n        axios.request({\n            method,\n            url,\n            data,\n            headers:{\n                Authorization:`Baerer ${token}`\n            }\n        }\n    )\n    }\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB;AACA,eAAeA,KAAK,CAACC,MAAM,CAAC;EACxBC,OAAO,EAAC,uBAAuB;EAC/BC,OAAO,EAAC;IACJ,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,MAAa,EAAEC,GAAU,EAAEC,IAAS,KAAG;EACtE,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EAC7C,IAAG,CAACF,KAAK,EAAC;IACN,MAAM,IAAIG,KAAK,CAAC,uCAAuC,CAAC;EAC5D,CAAC,MACG;IACAX,KAAK,CAACY,OAAO,CAAC;MACVP,MAAM;MACNC,GAAG;MACHC,IAAI;MACJJ,OAAO,EAAC;QACJU,aAAa,EAAE,UAASL,KAAM;MAClC;IACJ,CACJ,CAAC;EACD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}